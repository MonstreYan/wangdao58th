<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cskaoyan.th58.mapper.UserMapper">

  <select id="selectByCondition" resultType="com.cskaoyan.th58.bean.User">
    select * from user
    <where>
      <!--此处写了一个where标签，不代表最终此处一定会有where，还取决于where标签内部有没有数据，如果为空，最终不会拼接where-->
      <!--if标签的test里面需要构建一个条件语句，最终要求返回true or false；如果返回的是true，则会在此处拼接上if标签里面的内容-->
      <!--where标签最终还会帮助我们将前缀、后缀的and 或者or去除-->
      <!--什么叫前缀、后缀？以什么开头、以什么结尾-->
      <if test="username != null and username != ''">
        and username = #{username}
      </if>
      <if test="id != null">
        and id = #{id}
      </if>
      <if test="phone != null and phone != ''">
        and phone = #{phone}
      </if>
    </where>
  </select>

  <select id="selectByCondition2" resultType="com.cskaoyan.th58.bean.User">
    select * from user
    <!--choose表示选择的意思；when相当于if...else if....else if....else if;otherwise相当于else-->
    <where>
      <choose>
        <when test="username != null and username != ''">
          and username = #{username}
        </when>
        <when test="phone != null and phone != ''">
          and phone = #{phone}
        </when>
        <otherwise>
          and email = #{email}
        </otherwise>
      </choose>
    </where>
    and password = #{password}
  </select>

  <sql id="base_column">
   id,username,phone,email,password
  </sql>

  <select id="selectAll" resultType="com.cskaoyan.th58.bean.User">
    select
    <!--相当于在此处会展开显示sql标签里面的内容，也就是等价于select id,username,phone,email,password-->
    <include refid="base_column"/>
    from user
  </select>

  <select id="selectByCondition3" parameterType="com.cskaoyan.th58.bean.User" resultType="com.cskaoyan.th58.bean.User">
    <!--也是同样的需要去构建动态sql语句，其实可以直接使用where搭配着if，但是这个案例中我们不去使用where，我们使用trim自己去处理-->
    select
    <include refid="base_column"/>
    from user
    <!--prefix:增加指定前缀；suffix：增加指定后缀；prefixOverrides：删除指定前缀；suffixOverrides删除指定后缀-->
    <!--同样，trim标签里面如果内容为空，那么也不会触发效果-->
<!--
    <trim prefix="" suffix="" prefixOverrides="" suffixOverrides=""
-->
    <trim prefix="where" prefixOverrides="and|or">
      <if test="username != null and username != ''">
        and username = #{username}
      </if>
      <if test="id != null">
        and id = #{id}
      </if>
      <if test="phone != null and phone != ''">
        and phone = #{phone}
      </if>
    </trim>
  </select>

  <!--现在的修改，我们的处理方式是：如果某个属性为null，那么会将该列的数据直接修改为null-->
  <!--但是在真实的场景下，很多时候，其实我们只是希望去修改有数据的属性；如果对象的属性为null，则表示不去修改它；但是此时是不满足需求的-->
  <update id="updateUserById">
    update user set username = #{username}, phone = #{phone}, email = #{email}, password = #{password} where id = #{id}
  </update>

  <update id="updateUserById2">
    update user
    <!--set标签表示的是如果内部的内容不为null，则会在此处拼接一个set关键字 字符；set还会帮助我们删除指定的后缀,-->
    <set>
      <!--if标签的语句里面的username指的是列还是指的是对象里面的属性？？？？对象里面的属性-->
      <!--如果mapper接口的方法添加了对应的注解，那么需要使用注解.属性值的方式来编写-->
      <if test="u.username != null and u.username != ''">
         username = #{u.username},
      </if>
      <if test="u.phone != null and u.phone != ''">
        phone = #{u.phone},
      </if>
      <if test="u.email != null and u.email != ''">
        email = #{u.email},
      </if>
      <if test="u.password != null and u.password != ''">
        password = #{u.password},
      </if>
    </set>
    where id = #{u.id}
  </update>

  <update id="updateUserById3">
    update user
    <trim prefix="set" suffixOverrides=",">
      <if test="username != null and username != ''">
        username = #{username},
      </if>
      <if test="phone != null and phone != ''">
        phone = #{phone},
      </if>
      <if test="email != null and email != ''">
        email = #{email},
      </if>
      <if test="password != null and password != ''">
        password = #{password},
      </if>
    </trim>
    where id = #{id}
  </update>

  <insert id="insertUsers" parameterType="com.cskaoyan.th58.bean.User">
    insert into user values
    <!--foreach标签表示的是循环处理；collection表示的是一个集合数据；参数都要求从collection中获取-->
    <!--collection：如何去写？如果是list，那么就写list；如果是数组，那么就写array；如果是其他的可以迭代的类型，那么需要设置一个注解；写注解的名称；那如果传递的是一个list，但是标注了注解呢?也是写注解的名称-->
    <!--item:就是循环遍历迭代出来的每个元素-->
    <!--index：索引下表；其实就相当于fori循环中i的功能-->
    <!--在本次循环和下次循环之间会填充的字符；本次循环和下次循环之间填充的分隔符-->
    <!--open、close : 循环开始之前添加的字符  循环结束之后添加的字符-->
    <foreach collection="list" item="u" separator="," index="i">
      (null,#{u.username},#{u.phone},#{u.email}, #{i})
    </foreach>
  </insert>

  <insert id="insertUsers2">
    insert into user values
    <foreach collection="us" item="u" separator=",">
      (null, #{u.username}, #{u.phone}, #{u.email}, #{u.password})
    </foreach>
  </insert>

  <insert id="insertUsers3">
    insert into user values
    <foreach collection="array" item="u" separator=",">
      (null, #{u.username}, #{u.phone}, #{u.email}, #{u.password})
    </foreach>
  </insert>

  <select id="selectIns" resultType="com.cskaoyan.th58.bean.User">
    select
    <include refid="base_column"/>
    from user
    <!--关于where可以使用where标签，也可以直接写一个where；如果确认后面一定会有条件，那么这两种方式没啥区别-->
    <where>
      id in
      <foreach collection="list" item="id" open="(" close=")" separator=",">
        #{id}
      </foreach>
    </where>
  </select>

  <select id="selectIns2" resultType="com.cskaoyan.th58.bean.User">
    select
    <include refid="base_column"/>
    from user
    <!--关于where可以使用where标签，也可以直接写一个where；如果确认后面一定会有条件，那么这两种方式没啥区别-->
    where
      id in (
      <foreach collection="list" item="id" separator=",">
        #{id}
      </foreach>
      )
  </select>

  <insert id="insertOne" parameterType="com.cskaoyan.th58.bean.User">
    <!--order顺序表示的是在当前的这个操作之前执行还是之后去执行;keyProperty:获取到的keyColumn的值之后赋值给当前参数的哪个属性，也就是id属性-->

    insert into user values (null, #{username}, #{phone}, #{email}, #{password})

    <selectKey order="AFTER" keyProperty="id" resultType="int">
      select last_insert_id();
    </selectKey>
  </insert>

  <!--下面这个便是对于上述的简化封装，useGeneratedKeys=true表示的是启用selectKey查询主键的功能；keyProperty表示的是查询到的主键的值之后赋值给参数的哪个属性，id属性-->
  <insert id="insertOne2" useGeneratedKeys="true" keyProperty="id" parameterType="com.cskaoyan.th58.bean.User">
    insert into user values (null, #{username}, #{phone}, #{email}, #{password})
  </insert>
</mapper>