package com.cskaoyan._15reflect;

/**
 * 配置文件： 就是存放配置信息的文件。 比如  properties  xml  yml
 * properties就是配置文件的一种。 以   key=value的形式存在。
 * <p>
 * 1.配置文件有什么作用。
 * 存放配置的文件。 比如，数据库的连接配置。 用户名、密码、url。
 * 2.为什么要有配置文件。
 * 因为改代码之后，流程非常麻烦。 效率不高。 我们将一些配置信息提出来，在不同的环境上，使用不同的配置信息， 这时候只需要改配置文件。不需要改代码
 *
 * // 会经过层层测试。   ==> 测完之后两三天过去了。
 * 需求 ===》 开发  ===》 测试（生产环境=操作非常严格，不可能给你测试用。 ）
 * 1.开发环境。 和银行系统中，一样的程序。  非常宽松。程序员自己玩。
 * 2.测试环境。 测试人员用的。   比较接近正式环境的一套环境。
 * 3.SAT 银行内部的测试环境。 银行准备的测试环境。 （更严格一点）
 * 4.UAT 和银行线上环境非常类似的一套环境。 甚至于里面有真实环境捞下来的数据。
 * 5.生产环境。
 *
 * 在有的公司里面，改代码后续的流程会非常长。
 *
 * @author Common-zhou
 * @since 2024-03-26 10:39
 */
public class Demo10Config {

    public static void main(String[] args) {
        //
        String url = "jdbc:mysql://localhost:3307?test1?characterEncoding=utf-8";
        String username = "admin";
        String password = "admin";

        // 配置写死在代码里，有啥不好？
        // 1.如果涉及到改动，非常的麻烦。
        // 非常容易出错。 非常容易改到业务代码，如果改完之后，直接上线（到线上环境运行）， 这时候极容易出错。
        // 所以，在公司中，一旦涉及到代码的更改。 上线会慎之又慎。
        // 会经过层层测试。   ==> 测完之后两三天过去了。

        // 这种东西，本质来说。不影响业务逻辑。 能不能将它抽出来。 放到一个专门的文件中，下一次要修改，直接改文件就行。


        // 2.有很多环境，不同的环境连接的数据库不同。
    }


}
